				
		pfSkel: Potential Field Based 3D Skeleton Extraction
				
				
TABLE OF CONTENTS:
	1. DESCRIPTION OF pfSkel AND COMPONENT MODULES
	2. INSTALLATION NOTES
	3. WHY USE THE MODULES SEPARATELY ?	
	4. HOW TO USE THE INDEPENDENT MODULES	
        5. SAVING/LOADING THE POTENTIAL FIELD TO/FROM A FILE
        6. CONTACT INFO
	
1. Description of pfSkel and component modules

   pfSkel is a collection of independent modules that perform the different 
tasks of the skeletonization algorithm. The modules are linked together in a 
single executable called pfSkel, but they can be used separately as well. Each 
module has a driver program that just takes the parameters from the command 
line, passes them to the module, and then outputs the result in a file.
   Some of the modules use the JAMA/C++ and TNT libraries for 
eigenvalues/eigenvectors calculation.
	
   TNT (Template Numerical Toolkit) and JAMA/C++ libraries were developed at 
Mathematical and Computational Sciences Division of The National Institute of 
Standards and Technology
<< http://math.nist.gov/tnt >>
   The libraries are included in the archive under the JAMA and TNT 
directories and do not require installation.


List of modules:

   MakeSolidVol - makes a 3D volume solid (i.e. no holes inside)
   ------------
      - [input]	  volume file name (format: unsigned char, no header),
		  volume size, 
      - [output]  solid volume file name (format: unsigned char, no header).
   

   ExpandVol - adds extra layers of voxels at the surface of the 3D object.
   ---------
      - [input]	 volume file name (format: unsigned char, no header),
                 volume size, 
                 number of layers to add.
      - [output] new volume file name (format: unsigned char, no header).
			
   PotField - computes the potential based vector field of the 3D object.
   --------
      - [input]  volume file name (format: unsigned char, no header),
                 volume size, 
                 field strength (integer: 4 - 10).
                 optional In/Out flag
      - [output] vector field file (format: 3 float values for each voxel, 
                                            no header).
			
   CritPts - finds the critical points of a vector field.
   -------
      - [input]	 volume file name (format: unsigned char, no header),
                 volume size, 
                 vector field file (as generated by PotField module)
                 optional In/Out flag
      - [output] critical points list (format: each critical point on a 
                    separate line: 
                    * point coordinates (3 float values), 
                    * type (1 - saddle point, 2 - attracting node,
                            3 - repelling node, 4 - unknown),
                    * 3 eigenvalues of the Jacobian matrix evaluated at the 
                        critical point,
                    * 3 eigenvectors of the Jacobian matrix evaluated at the 
                        critical point
                        (3 float values for each vector)
							).
			
   HighDiverg - finds the points with the highest negative divergence values 
   ----------     of the vector field.
      - [input]  volume file name (format: unsigned char, no header),
                 volume size, 
                 vector field file (as generated by PotField module)
                 percentage of high divergence points to return. Top .. % of 
                    the highest negative divergence points will be returned.
                 optional In/Out flag
      - [output] high divergence points list (format: 
                    * point coordinates (3 float values)).
			

   StreamLn - follows the streamlines starting at critical and high divergence 
   --------     points.
      - [input]  volume file name (format: unsigned char, no header),
                 volume size, 
                 vector field file (as generated by PotField module)
                 critical points file (as generated by CritPts module)
                 high divergence points file (as generated by the HighDiverg 
                                              module)
      - [output] skeleton points (format: 
                    * point coordinates (3 float values)
                    * skeleton segment (1 integer value)
                    * 1 float value that should be ignored.


   In addition to all the separate modules, pfSkel is a program that 
encapsulates the functionality of all the modules, in a single working program,
with a few parameters:
      - [input]  volume file name (format: unsigned char, no header),
                 volume size, 
                 distance of electrical charges from object boundary
                 field strength
                 percentage of highest divergence points to use
                 optional parameters:
                    interactive mode
                    save the vector field to a file
                    load the vector field from a file
                    output skeleton as lines between joints instead of points
      - [output] skeleton file name (format: as described for the StreamLn 
                                             module above).
	

2. INSTALLATION NOTES
	
   1. decompress the archive in an empty directory
   If you want to use pfSkel
      2. type: "make pfSkel"
      3. -
      4. -
   If you want to use the separate modules 
      2. type: "cd Scripts"
      3. type: "./makeallmodules.sh"
      4. type: "cd .."
   5. You are ready to go.


3. WHY USE THE MODULES SEPARATELY ?
	
   pfSkel encapsulates the functionality of all the modules in a single easy 
to use program. So why would anybody want to use the modules separately ? 
   Getting the right skeleton is an iterative process. But most often, the 
phases that need to be repeated are the last 2: getting a number of high 
divergence points and using those in skeleton generation.
   pfSkel runs all the stages of the process again even if you change just one 
parameter, and that may take some time. Running only the last 2 modules 
(getting high divergence points (HighDiverg) and constructing the skeleton 
(StreamLn)) multiple times can save you a lot of time, especially for large 
datasets (see section 4. HOW TO USE THE INDEPENDENT MODULES of this document).
   Since the part that takes most of the running time is the potential field 
computation, if you decide on a field strength, you can modify the other 
parameters of the program without computing the potential field again (see 
section 5. SAVING/LOADING THE POTENTIAL FIELD TO/FROM A FILE of this document).

4. HOW TO USE THE INDEPENDENT MODULES
	
   Follow the installation instruction for the "If you want to use the separate
modules" section.
   Each module has it's own driver program located in the module's directory, 
called driver. This driver program just reads in the command line arguments, 
passes them on to the module and then outputs the result to a file. See module 
description in section 2 of this document. Additionally, if you just run the 
driver program with no parameters, or the wrong number of parameters, the 
program will list the required parameters.
	
   Modules should be run in the following order.
	
   MakeSolidVol - creates a solid volume, making sure there are no holes in 
the dataset. You can skip this module if you are sure the dataset doesn't have
holes.

   ExpandVol - adds some extra layers of voxels at the surface of the object. 
This module should be used only if the object has very thin regions (1, or 2 
voxels thick). 
!!! 
Adding layers of extra voxels at the surface of the object will smooth the 
object, and possibly merge some features that are very close together. 
!!!

   PotField - computes the vector field for the object

   CritPts - finds the critical points of the object's vector field.
   
   HighDiverg - finds the highest negative divergence points of the object's
vector field.

   StreamLn - follows the streamlines of the vector field, starting at the 
critical and high divergence points and builds the skeleton.
	
Usually, the last 2 modules will be run multiple times to adjust the number of 
high divergence points to use for skeleton generation.


5. SAVING/LOADING THE POTENTIAL FIELD TO/FROM A FILE

   Computing the potential field of the 3D object takes most of the total 
running time of the algorithm. Once you decided on a field strength, you can 
save the computed potential field to a file by using the -vectorfieldoutputfile
option of the pfSkel program. 
   The saved potential field can then be loaded on the next run of pfSkel using
the -vectorfieldinputfile option and it will not be computed again, saving you 
a lot of time.
!!!
A potential field has 3 float values for each voxel in the dataset. Thus, the 
generated file will be about 3*8 (24) times bigger than the volume dataset.
(actually more than that since it is a ASCII file and uses separators between 
values).
!!!


6. CONTACT INFO

Nicu D. Cornea
Electrical and Computer Engineering Department
Rutgers, The State University of New Jersey
Piscataway, NJ 08854
e-mail: cornea@caip.rutgers.edu


